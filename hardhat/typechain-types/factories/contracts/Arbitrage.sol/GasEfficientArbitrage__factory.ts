/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  GasEfficientArbitrage,
  GasEfficientArbitrageInterface,
} from "../../../contracts/Arbitrage.sol/GasEfficientArbitrage";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_uniswapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_daiToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wethToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "daiToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "executeArbitrage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapRouter",
    outputs: [
      {
        internalType: "contract IUniswapV2Router",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516111bd3803806111bd83398181016040528101906100329190610225565b61004c673dea0073f2db284d60c01b6101bf60201b60201c565b61006667b188a2999c83b13d60c01b6101bf60201b60201c565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100c06718f7e52fdae2188e60c01b6101bf60201b60201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061011b67a6629ca7110f5f8c60c01b6101bf60201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061017667593b92450f36a82f60c01b6101bf60201b60201c565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610278565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101f2826101c7565b9050919050565b610202816101e7565b811461020d57600080fd5b50565b60008151905061021f816101f9565b92915050565b60008060006060848603121561023e5761023d6101c2565b5b600061024c86828701610210565b935050602061025d86828701610210565b925050604061026e86828701610210565b9150509250925092565b610f36806102876000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80634b57b0be14610067578063735de9f7146100855780638da5cb5b146100a357806395ccea67146100c1578063be22f546146100dd578063f7c7724f146100fb575b600080fd5b61006f610117565b60405161007c9190610940565b60405180910390f35b61008d61013d565b60405161009a91906109ba565b60405180910390f35b6100ab610161565b6040516100b89190610940565b60405180910390f35b6100db60048036038101906100d69190610a4b565b610187565b005b6100e5610398565b6040516100f29190610940565b60405180910390f35b61011560048036038101906101109190610a8b565b6103be565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61019b67f85d1c51ed11267660c01b6108b7565b6101af673ca0db0265a105b060c01b6108b7565b6101c367f7a4c11e486ff47c60c01b6108b7565b6101d767cb30f5976c9cebc760c01b6108b7565b6101eb67032292115e57233760c01b6108b7565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027290610b15565b60405180910390fd5b61028f67a65ea24d7052458960c01b6108b7565b6102a3671ea80d8b306acf0560c01b6108b7565b6102b7677b9edf65493d08a260c01b6108b7565b6102cb67d6f13de8e6d6a87260c01b6108b7565b6102df672fa6a708c8b4fda760c01b6108b7565b6102f3674dbd4a9ba61423ef60c01b6108b7565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610350929190610b44565b6020604051808303816000875af115801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190610ba5565b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103d26773ad0ddd5de400af60c01b6108b7565b6103e6673ca0db0265a105b060c01b6108b7565b6103fa67f7a4c11e486ff47c60c01b6108b7565b61040e67cb30f5976c9cebc760c01b6108b7565b61042267032292115e57233760c01b6108b7565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990610b15565b60405180910390fd5b6104c667a65ea24d7052458960c01b6108b7565b6104da671ea80d8b306acf0560c01b6108b7565b6104ee67d7c96055103a052a60c01b6108b7565b61050267a489dee3524d877a60c01b6108b7565b610516675ac7ab736bc26cbf60c01b6108b7565b61052a674d9029fa2685fdcc60c01b6108b7565b606061054067fb0a7a03baad1c6360c01b6108b7565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061057757610576610bd2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506105c5675f28c879f3248cdc60c01b6108b7565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106105fc576105fb610bd2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061064a67d9e44e8830a6f9a360c01b6108b7565b61065e67a9ea9e54d26e359660c01b6108b7565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f84846040518363ffffffff1660e01b81526004016106bc929190610cbf565b600060405180830381865afa1580156106d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107029190610e5d565b905061071867f1217e974db1132160c01b6108b7565b61072c674e4dde725245878760c01b6108b7565b60008160018151811061074257610741610bd2565b5b6020026020010151905061076067bb68e042a2b5e0a760c01b6108b7565b6107746758276f14fd3ef65560c01b6108b7565b600061077e6108ba565b9050610794674afab66dd503e2b460c01b6108b7565b6107a8670166b6c65e50d81660c01b6108b7565b8082111561089b576107c467cb869fc9c0de84de60c01b6108b7565b6107d867b8db6dc91947d01b60c01b6108b7565b6107ec6779a92dbda6a0aa4a60c01b6108b7565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173986848730426040518663ffffffff1660e01b815260040161084d959493929190610ea6565b6000604051808303816000875af115801561086c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108959190610e5d565b506108b0565b6108af6734ae4da4ff0c055b60c01b6108b7565b5b5050505050565b50565b60006108d0674d4a56a2bfddcfa860c01b6108b7565b6108e467d5657f6449dda43a60c01b6108b7565b6108f867795f17cb564db22d60c01b6108b7565b6000905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061092a826108ff565b9050919050565b61093a8161091f565b82525050565b60006020820190506109556000830184610931565b92915050565b6000819050919050565b600061098061097b610976846108ff565b61095b565b6108ff565b9050919050565b600061099282610965565b9050919050565b60006109a482610987565b9050919050565b6109b481610999565b82525050565b60006020820190506109cf60008301846109ab565b92915050565b6000604051905090565b600080fd5b600080fd5b6109f28161091f565b81146109fd57600080fd5b50565b600081359050610a0f816109e9565b92915050565b6000819050919050565b610a2881610a15565b8114610a3357600080fd5b50565b600081359050610a4581610a1f565b92915050565b60008060408385031215610a6257610a616109df565b5b6000610a7085828601610a00565b9250506020610a8185828601610a36565b9150509250929050565b600060208284031215610aa157610aa06109df565b5b6000610aaf84828501610a36565b91505092915050565b600082825260208201905092915050565b7f4e6f742074686520636f6e7472616374206f776e657200000000000000000000600082015250565b6000610aff601683610ab8565b9150610b0a82610ac9565b602082019050919050565b60006020820190508181036000830152610b2e81610af2565b9050919050565b610b3e81610a15565b82525050565b6000604082019050610b596000830185610931565b610b666020830184610b35565b9392505050565b60008115159050919050565b610b8281610b6d565b8114610b8d57600080fd5b50565b600081519050610b9f81610b79565b92915050565b600060208284031215610bbb57610bba6109df565b5b6000610bc984828501610b90565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c368161091f565b82525050565b6000610c488383610c2d565b60208301905092915050565b6000602082019050919050565b6000610c6c82610c01565b610c768185610c0c565b9350610c8183610c1d565b8060005b83811015610cb2578151610c998882610c3c565b9750610ca483610c54565b925050600181019050610c85565b5085935050505092915050565b6000604082019050610cd46000830185610b35565b8181036020830152610ce68184610c61565b90509392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d3d82610cf4565b810181811067ffffffffffffffff82111715610d5c57610d5b610d05565b5b80604052505050565b6000610d6f6109d5565b9050610d7b8282610d34565b919050565b600067ffffffffffffffff821115610d9b57610d9a610d05565b5b602082029050602081019050919050565b600080fd5b600081519050610dc081610a1f565b92915050565b6000610dd9610dd484610d80565b610d65565b90508083825260208201905060208402830185811115610dfc57610dfb610dac565b5b835b81811015610e255780610e118882610db1565b845260208401935050602081019050610dfe565b5050509392505050565b600082601f830112610e4457610e43610cef565b5b8151610e54848260208601610dc6565b91505092915050565b600060208284031215610e7357610e726109df565b5b600082015167ffffffffffffffff811115610e9157610e906109e4565b5b610e9d84828501610e2f565b91505092915050565b600060a082019050610ebb6000830188610b35565b610ec86020830187610b35565b8181036040830152610eda8186610c61565b9050610ee96060830185610931565b610ef66080830184610b35565b969550505050505056fea26469706673582212204e9c70370579feb065966baa46a5995b58f8713d553ca7eb17e4a07b9bd5410864736f6c634300081b0033";

type GasEfficientArbitrageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasEfficientArbitrageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasEfficientArbitrage__factory extends ContractFactory {
  constructor(...args: GasEfficientArbitrageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _uniswapRouter: AddressLike,
    _daiToken: AddressLike,
    _wethToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _uniswapRouter,
      _daiToken,
      _wethToken,
      overrides || {}
    );
  }
  override deploy(
    _uniswapRouter: AddressLike,
    _daiToken: AddressLike,
    _wethToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _uniswapRouter,
      _daiToken,
      _wethToken,
      overrides || {}
    ) as Promise<
      GasEfficientArbitrage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): GasEfficientArbitrage__factory {
    return super.connect(runner) as GasEfficientArbitrage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasEfficientArbitrageInterface {
    return new Interface(_abi) as GasEfficientArbitrageInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): GasEfficientArbitrage {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as GasEfficientArbitrage;
  }
}
