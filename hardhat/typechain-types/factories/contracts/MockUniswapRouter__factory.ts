/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockUniswapRouter,
  MockUniswapRouterInterface,
} from "../../contracts/MockUniswapRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "weth",
        type: "address",
      },
      {
        internalType: "address",
        name: "dai",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106533803806106538339818101604052810190610032919061011d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b6104e78061016c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063ad5c464814610046578063d06ca61f14610064578063e0bab4c414610094575b600080fd5b61004e6100b2565b60405161005b91906101e2565b60405180910390f35b61007e600480360381019061007991906102a2565b6100d6565b60405161008b91906103c0565b60405180910390f35b61009c61017b565b6040516100a991906101e2565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60608282905067ffffffffffffffff8111156100f5576100f46103e2565b5b6040519080825280602002602001820160405280156101235781602001602082028036833780820191505090505b509050838160008151811061013b5761013a610411565b5b602002602001018181525050600284610154919061046f565b8160018151811061016857610167610411565b5b6020026020010181815250509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101cc826101a1565b9050919050565b6101dc816101c1565b82525050565b60006020820190506101f760008301846101d3565b92915050565b600080fd5b600080fd5b6000819050919050565b61021a81610207565b811461022557600080fd5b50565b60008135905061023781610211565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126102625761026161023d565b5b8235905067ffffffffffffffff81111561027f5761027e610242565b5b60208301915083602082028301111561029b5761029a610247565b5b9250929050565b6000806000604084860312156102bb576102ba6101fd565b5b60006102c986828701610228565b935050602084013567ffffffffffffffff8111156102ea576102e9610202565b5b6102f68682870161024c565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61033781610207565b82525050565b6000610349838361032e565b60208301905092915050565b6000602082019050919050565b600061036d82610302565b610377818561030d565b93506103828361031e565b8060005b838110156103b357815161039a888261033d565b97506103a583610355565b925050600181019050610386565b5085935050505092915050565b600060208201905081810360008301526103da8184610362565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061047a82610207565b915061048583610207565b925082820261049381610207565b915082820484148315176104aa576104a9610440565b5b509291505056fea26469706673582212204d5aacecc4a0222addbf73c068144c2ee725ea24b5bf6e4512adb530a6ac031f64736f6c634300081b0033";

type MockUniswapRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapRouter__factory extends ContractFactory {
  constructor(...args: MockUniswapRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    weth: AddressLike,
    dai: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(weth, dai, overrides || {});
  }
  override deploy(
    weth: AddressLike,
    dai: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(weth, dai, overrides || {}) as Promise<
      MockUniswapRouter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockUniswapRouter__factory {
    return super.connect(runner) as MockUniswapRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapRouterInterface {
    return new Interface(_abi) as MockUniswapRouterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockUniswapRouter {
    return new Contract(address, _abi, runner) as unknown as MockUniswapRouter;
  }
}
